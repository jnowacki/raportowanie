---
title: "Wheelie service report"
format:
  html:
    toc: true
    embed-resources: true
editor: visual
theme: yeti
execute: 
  warning: false
  message: false
  echo: false
---

```{r, echo = FALSE}
##############
# SET UP
#############

# Libraries
library(properties)
library(DBI)
library(odbc)
library(tidyverse)
library(plotly)

# Connection with DW
# Rename template.config.properties to config.properties and fill out login data
# NEVER commit this file (it is present in .gitignore)
config <- read.properties('config.properties')

con <- dbConnect(odbc(),
                 driver = "SQL Server",
                 uid = config$user,
                 pwd = config$pass,
                 server = 'mssql-2017.labs.wmi.amu.edu.pl',
                 database = 'iliagil')


# Create 'Service' data frame
Service <- dbGetQuery(con,
                  'SELECT stype.service_type_name,      
                  fs.service_cost,      
                  cal.calendar_month,     
                  cal.calendar_year,      
                  cal.calendar_year_month,      
                  cal.MonthName month_name,     
                  car.fuel_type,      
                  car.producer,     
                  car.model,      
                  car.production_year
                  
                  FROM fact_service fs       
                  
                  JOIN dim_calendar cal ON fs.service_date_id = cal.DATE_id       
                  JOIN dim_service_type stype ON fs.service_type_id = stype.service_type_id       
                  JOIN dim_car car ON car.car_id = fs.car_id')

# Adjust service type name
Service$service_type_name[Service$service_type_name == 'tire change'] <- 'Tire change'
Service$service_type_name[Service$service_type_name == 'oil service'] <- 'Oil service'

# Unify petrol type
Service$fuel_type[Service$fuel_type == 'diesle'] <- 'Diesel'
Service$fuel_type[Service$fuel_type == 'Petol'] <- 'Petrol'

# Change character column types to factors
for (i in 1:ncol(Service)){
  if(sapply(Service[i], class) == 'character'){
    Service[i] <- lapply(Service[i], function(x) as.factor(x))
  }
}

# Create 'Income' data frame
Income <- dbGetQuery(con,
                      'SELECT fr.rental_amount,
                      fr.payment_deadline,
                      car.producer,
                      car.model,
                      car.production_year
                      
                      FROM fact_rental fr
                      
                      JOIN dim_calendar cal ON cal.DATE_id = fr.rental_DATE_id
                      JOIN dim_car car ON car.car_id = fr.car_id')

Income <- Income %>% mutate(payment_year = as.integer(substr(payment_deadline,1,4)),
                  payment_month = as.integer(substr(payment_deadline,6,7)),
                  payment_year_month = as.integer(paste0(substr(payment_deadline,1,4),substr(payment_deadline,6,7)))) %>%
  select(1,3:8)

# Change character column types to factors
for (i in 1:ncol(Income)){
  if(sapply(Income[i], class) == 'character'){
    Income[i] <- lapply(Income[i], function(x) as.factor(x))
  }
}


# Custom palette
my_pal = c('#798BA0','#9FACBD','#798E87','#9BB0A5','#9F818C','#BCA5AE','#8D8680','#C3BBB5','#CCC591')
# Highlight palette
my_pal_2 = c('#E29E21','#DFE0DF','#402E32')
```

### Service costs

::: panel-tabset

## 2022 vs 2021

```{r}
df <- Service %>% group_by(service_type_name, calendar_year) %>%
  filter(calendar_year == 2022 | calendar_year == 2021) %>%
  summarise(service_cost_k = round(sum(service_cost)/1000,1)) %>%
  mutate(yoy_change = ((service_cost_k - lag(service_cost_k))/service_cost_k)*100) %>%
  replace_na(list(yoy_change = 0)) %>%
  mutate(across(c('calendar_year'),factor))

sc_2021 <- df[1,3]+df[3,3]
sc_2022 <- df[2,3]+df[4,3]
diff <- round(((sc_2022-sc_2021)/sc_2022)*100,2)
```

Total service costs in 2021: **`r sc_2021` k PLN**
\
Total service costs in 2022: **`r sc_2022` k PLN**
\
_Change vs 2021: **+ `r sc_2022 - sc_2021` k PLN (+ `r diff`%)**_


```{r}
g01_b <- ggplot(df, aes(x = calendar_year,
                        y = service_cost_k,
                        fill = service_type_name,
                        # tooltip edition:
                        text = paste(
                          '<b>Service cost:</b>', service_cost_k,'k PLN',
                          '\n<b>YOY change:</b>', round(yoy_change,2), '%'))) +
  geom_bar(stat = 'identity') +
  labs(x = 'Year', y = 'Service cost (k PLN)') +
  scale_fill_manual(name = 'Service type', values = c(my_pal))

ggplotly(g01_b, tooltip = c('text'))
```

## General trend

Change of service costs YOY:

```{r}
df <- Service %>% group_by(service_type_name, calendar_year) %>%
  summarise(service_cost_k = round(sum(service_cost)/1000,1)) %>%
  mutate(yoy_change = ((service_cost_k - lag(service_cost_k))/service_cost_k)*100) %>%
  replace_na(list(yoy_change = 0)) %>%
  mutate(across(c('calendar_year'),factor))

g02_b <- ggplot(df, aes(x = calendar_year,
                        y = service_cost_k,
                        fill = service_type_name,
                        # tooltip edition:
                        text = paste(
                          '<b>Service cost:</b>', service_cost_k,'k PLN',
                          '\n<b>YOY change:</b>', round(yoy_change,2), '%'))) +
  geom_bar(stat = 'identity') +
  labs(x = 'Year', y = 'Service cost (k PLN)') +
  scale_fill_manual(name = 'Service type', values = c(my_pal))

ggplotly(g02_b, tooltip = c('text'))
```

## Service costs vs income

```{r}
yearly_income <- Income %>% group_by(payment_year) %>%
  summarise(income_k = (sum(rental_amount))/1000)

df <- Service %>% group_by(calendar_year) %>%
  summarise(service_cost_k = round(sum(service_cost)/1000,1)) %>%
  left_join(yearly_income, by=c('calendar_year' = 'payment_year')) %>%
  mutate(yoy_change = ((service_cost_k - lag(service_cost_k))/service_cost_k)*100,
         cost_of_rev = (service_cost_k/income_k)*100) %>%
  replace_na(list(yoy_change = 0))

df <- as.data.frame(df)

g03 <- ggplot(df) + 
    geom_bar(aes(x = calendar_year,
                 y = service_cost_k,
                 text = paste(
                   '<b>Service cost:</b>', service_cost_k,'k PLN',
                   '\n<b>YOY change:</b>', round(yoy_change,2), '%',
                   '\n----------------------------',
                   '\n<b>Part of income:</b>', round(cost_of_rev,2),' %')),
             stat = 'identity',
             fill = my_pal[1]) +
    geom_line(aes(x = calendar_year,
                  y = 100*cost_of_rev,
                  color = '% of income'),
              stat = 'identity',
              size = 2) +
    labs(x = 'Year', y = 'Service cost (k PLN)') +
    scale_color_manual(name = '', values = my_pal_2[1]) +
    scale_y_continuous(sec.axis = sec_axis(~.*0.01, name = '% of income'))


ggplotly(g03, tooltip = c('text'))
```

:::
