---
title: "Wheelie service report"
format:
  html:
    toc: true
    embed-resources: true
    page-layout: full
editor: visual
theme: Flatly
execute: 
  warning: false
  message: false
  echo: false
---

```{r, echo = FALSE}
##############
# SET UP
#############

# Libraries
library(properties)
library(DBI)
library(odbc)
library(tidyverse)
library(plotly)
library(DT)

# Connection with DW
# Rename template.config.properties to config.properties and fill out login data
# NEVER commit this file (it is present in .gitignore)
config <- read.properties('config.properties')

con <- dbConnect(odbc(),
                 driver = "SQL Server",
                 uid = config$user,
                 pwd = config$pass,
                 server = 'mssql-2017.labs.wmi.amu.edu.pl',
                 database = 'iliagil')

# Create 'Calendar' data frame
Calendar <- dbGetQuery(con,
                       'SELECT	calendar_year,
                       calendar_month,
                       calendar_year_month,
                       MonthName AS month_name
                       
                       FROM dim_calendar
                       
                       GROUP BY calendar_year,
                       calendar_month,
                       calendar_year_month,
                       MonthName')

Calendar$short_date <- paste0(substr(Calendar$month_name,1,3),"'",substr(Calendar$calendar_year,3,4))

# Remove spaces from months names
Calendar <- as.data.frame(
  apply(Calendar,2, function(x) gsub("\\s+", "", x)))

# Change column types
for (i in c(1:3)){
  Calendar[i] <- lapply(Calendar[i], function(x) as.integer(x))
}


# Create 'Service' data frame
Service <- dbGetQuery(con,
                  'SELECT stype.service_type_name,      
                  fs.service_cost,
                  fs.car_id,
                  cal.calendar_month,     
                  cal.calendar_year,      
                  cal.calendar_year_month,      
                  cal.MonthName month_name,     
                  car.fuel_type,      
                  car.producer,     
                  car.model,      
                  car.production_year
                  
                  FROM fact_service fs       
                  
                  JOIN dim_calendar cal ON fs.service_date_id = cal.DATE_id       
                  JOIN dim_service_type stype ON fs.service_type_id = stype.service_type_id       
                  JOIN dim_car car ON car.car_id = fs.car_id')

# Adjust service type name
Service$service_type_name[Service$service_type_name == 'tire change'] <- 'Tire change'
Service$service_type_name[Service$service_type_name == 'oil service'] <- 'Oil service'

# Unify petrol type
Service$fuel_type[Service$fuel_type == 'diesle'] <- 'Diesel'
Service$fuel_type[Service$fuel_type == 'Petol'] <- 'Petrol'

# Remove spaces from data frame
Service[6:10] <- as.data.frame(
  apply(Service[6:10], 2, function(x) gsub("\\s+", "", x)))

# Change column types
Service$calendar_year_month <- as.integer(Service$calendar_year_month)



# Create 'Income' data frame
Income <- dbGetQuery(con,
                      'SELECT fr.rental_amount,
                      fr.payment_deadline,
                      car.producer,
                      car.model,
                      car.production_year
                      
                      FROM fact_rental fr
                      
                      JOIN dim_calendar cal ON cal.DATE_id = fr.rental_DATE_id
                      JOIN dim_car car ON car.car_id = fr.car_id')

Income <- Income %>% mutate(payment_year = as.integer(substr(payment_deadline,1,4)),
                  payment_month = as.integer(substr(payment_deadline,6,7)),
                  payment_year_month = as.integer(paste0(substr(payment_deadline,1,4),substr(payment_deadline,6,7)))) %>%
  select(1,3:8)

# Remove spaces from data frame
Income[2:3] <- as.data.frame(
  apply(Income[2:3], 2, function(x) gsub("\\s+", "", x)))


# Custom palette
my_pal = c("#798E87",'#9BB0A5','#798BA0','#9FACBD','#635e68','#a9a5b0', "#78726d","#9e9995",'#c7c7c1')

# Long
my_pal_l = c("#798E87",'#9BB0A5','#b39f57',"#CCC591",'#a3a899','#798BA0','#9FACBD','#635e68','#a9a5b0', "#78726d","#9e9995",'#c7c7c1')

# Highlights
my_pal_h = c('#cf9d47','#f7f6f6','#454141')
```

### Service costs

#### 2022 vs 2021

```{r}
df01_b <- Service %>% group_by(service_type_name, calendar_year) %>%
  filter(calendar_year == 2022 | calendar_year == 2021) %>%
  summarise(service_cost_k = round(sum(service_cost)/1000,1)) %>%
  mutate(yoy_change = ((service_cost_k - lag(service_cost_k))/service_cost_k)*100) %>%
  replace_na(list(yoy_change = 0)) %>%
  mutate(across(c('calendar_year'),factor))

sc_2021 <- df01_b[1,3]+df01_b[3,3]
sc_2022 <- df01_b[2,3]+df01_b[4,3]
diff <- round(((sc_2022-sc_2021)/sc_2022)*100,2)
```

Total service costs in 2022: **`r sc_2022` k PLN *(+ `r sc_2022 - sc_2021` k PLN \|\| + `r diff`% vs 2021)***\
Total service costs in 2021: **`r sc_2021` k PLN**

```{r}
g01_b <- ggplot(df01_b, aes(x = calendar_year,
                        y = service_cost_k,
                        fill = service_type_name,
                        label = service_cost_k,
                        # tooltip edition:
                        text = paste('<b>YOY change:</b>', round(yoy_change,2), '%'))) +
    geom_bar(stat = 'identity') +
    labs(x = 'Year', y = 'Service cost (k PLN)') +
    scale_fill_manual(name = 'Service type', values = c(my_pal)) +
    
    # "bold" labels 
    geom_text(position = position_stack(vjust = 0.9), color = my_pal_h[2], size=4) +
    geom_text(position = position_stack(vjust = 0.9), color = my_pal_h[2], size=4.01) +
    geom_text(position = position_stack(vjust = 0.9), color = my_pal_h[2], size=4.02) +
    geom_text(position = position_stack(vjust = 0.9), color = my_pal_h[2], size=4.03)

ggplotly(g01_b, tooltip = c('text'))
```

#### General trend vs income

Change of service costs YOY:

```{r}
yearly_income <- Income %>% group_by(payment_year) %>%
  summarise(income_k = (sum(rental_amount))/1000)

df03 <- Service %>% group_by(calendar_year) %>%
  summarise(service_cost_k = round(sum(service_cost)/1000,1)) %>%
  left_join(yearly_income, by=c('calendar_year' = 'payment_year')) %>%
  mutate(yoy_change = ((service_cost_k - lag(service_cost_k))/service_cost_k)*100,
         cost_of_rev = (service_cost_k/income_k)*100) %>%
  replace_na(list(yoy_change = 0))

g03 <- ggplot(df03, aes(label = service_cost_k)) + 
    geom_bar(aes(x = as.integer(calendar_year),
                 y = service_cost_k,
                 text = paste(
                   '<b>YOY change:</b>', round(yoy_change,2), '%',
                   '\n----------------------------',
                   '\n<b>Part of income:</b>', round(cost_of_rev,2),'%')),
             stat = 'identity',
             fill = my_pal[1]) +
    geom_line(aes(x = as.integer(calendar_year),
                  y = 100*cost_of_rev,
                  color = '% of income'),
              stat = 'identity',
              size = 1.25) +
    labs(x = 'Year', y = 'Service cost (k PLN)') +
    scale_color_manual(name = '', values = my_pal_h[1])+
    scale_y_continuous(sec.axis = sec_axis(~.*0.01, name = '% of income')) +
  
  # "bold" labels
  geom_text(aes(x = as.integer(calendar_year), y = service_cost_k),
            position = position_stack(vjust = 0.95), color = my_pal_h[2], size=3.5) +
  geom_text(aes(x = as.integer(calendar_year), y = service_cost_k),
            position = position_stack(vjust = 0.95), color = my_pal_h[2], size=3.51) +
  geom_text(aes(x = as.integer(calendar_year), y = service_cost_k),
            position = position_stack(vjust = 0.95), color = my_pal_h[2], size=3.52) +
  geom_text(aes(x = as.integer(calendar_year), y = service_cost_k),
            position = position_stack(vjust = 0.95), color = my_pal_h[2], size=3.53)


ggplotly(g03, tooltip = c('text'))
```

### Service activities

::: {.panel-tabset}

#### Events per service type

```{r}
df04 <- Service %>% group_by(calendar_year_month, service_type_name) %>%
  summarise(service_cost_k = round(sum(service_cost/1000),1),
            service_cnt = n(),
            avg_cost = round((service_cost_k*1000)/service_cnt,1)) %>%
  right_join(Calendar, by='calendar_year_month') %>%
  replace_na(list(service_cnt = 0)) %>%
  arrange(calendar_year_month) %>%
  filter(calendar_year == 2021 | calendar_year == 2022)

```

Number of service activities in years 2021-2022 (split by **service type**).

```{r}
# Vector with data labels (for labels not to overlap in ggplotly)
d <- c(distinct(df04, short_date)$short_date)
d <- replace(d,seq(2,26,2),'')

g04 <- ggplot(df04, aes(x = as.character(calendar_year_month),
             y = service_cnt,
             fill = service_type_name,
             label = service_cnt,
             text = paste('<b>Events:</b>',service_cnt,
                          '\n----------------------------',
                          '<b>\nTotal service cost:</b>', service_cost_k,'k PLN',
                          '<b>\nAverage service cost:</b>',avg_cost,' PLN'))) +
  geom_bar(stat = 'identity') +
  scale_fill_manual(name = 'Service type', values = my_pal, limits = c('Oil service', 'Tire change')) +
  scale_x_discrete(labels = c(d)) +
  
  geom_text(position = position_stack(vjust = 0.95), color = my_pal_h[2], size=2.5) +
  geom_text(position = position_stack(vjust = 0.95), color = my_pal_h[2], size=2.51) +
  geom_text(position = position_stack(vjust = 0.95), color = my_pal_h[2], size=2.52) +
  geom_text(position = position_stack(vjust = 0.95), color = my_pal_h[2], size=2.53) +
  
  labs(x = '', y = 'Number of serivce activities')

# Remove "NA" from legend in ggplotly
p <- ggplotly(g04, tooltip = c('text'))
p %>% style(p, showlegend = FALSE, traces = 3)

```

#### Events per producer

Number of service activities in years 2021-2022 - split by **producer**.

```{r}
df05 <- Service %>% group_by(calendar_year_month, producer) %>%
  summarise(service_cost_k = round(sum(service_cost/1000),1),
            service_cnt = n(),
            avg_cost = round((service_cost_k*1000)/service_cnt,1)) %>%
  right_join(Calendar, by='calendar_year_month') %>%
  replace_na(list(service_cnt = 0)) %>%
  arrange(calendar_year_month) %>%
  filter(calendar_year == 2021 | calendar_year == 2022)

# Vector with data labels (for labels not to overlap in ggplotly some values must be empty)
d <- c(distinct(df05, short_date)$short_date)
d <- replace(d,seq(2,26,2),'')

g05 <- ggplot(df05, aes(x = as.character(calendar_year_month),
                         y = service_cnt,
                         fill = reorder(producer, service_cnt),
                         label = service_cnt,
                         text = paste('<b>Events: </b>',service_cnt,
                                      '\n----------------------------',
                                      '<b>\nTotal service cost:</b>', service_cost_k,'k PLN',
                                      '<b>\nAverage service cost: </b>',avg_cost,' PLN'))) +
    geom_bar(stat = 'identity') +
    scale_fill_manual(name = 'Producer', values = my_pal,
                      limits = c(levels(Service$producer))) +
    scale_x_discrete(labels = c(d)) +
    
    geom_text(position = position_stack(vjust = 0.8), color = my_pal_h[2], size=2.0) +
    geom_text(position = position_stack(vjust = 0.8), color = my_pal_h[2], size=2.01) +
    geom_text(position = position_stack(vjust = 0.8), color = my_pal_h[2], size=2.02) +
    geom_text(position = position_stack(vjust = 0.8), color = my_pal_h[2], size=2.03) +
    
    labs(x = '', y = 'Number of serivce activities')

# Remove "NA" from legend in ggplotly
p <- ggplotly(g05, tooltip = c('text'))
p %>% style(p, showlegend = FALSE, traces = 9)

```

:::

### Car maintenance costs

#### Service costs in 2022

*A: tutaj w tooltipie dodałabym średni koszt serwisu danego samochodu -
tzn brakuje mi informacji czemu za dany model placimy ile placimy,
czy zalezy to od liczby samochodu czy koszty serwisu danego modelu są droższe?*

```{r}
# Total costs per model and producer

df06 <- Service %>% group_by(producer, model, calendar_year) %>%
  summarise(service_cost_model_k = round(sum(service_cost/1000),1)) %>%
  group_by(producer, calendar_year) %>%
  mutate(service_cost_producer_k = sum(service_cost_model_k))


g06 <- ggplot((df06 %>% filter(calendar_year==2022)),
               aes(x = reorder(producer, service_cost_producer_k),
                   y = service_cost_model_k,
                   fill = reorder(model, service_cost_producer_k),
                   label = paste(service_cost_model_k, model, sep="\n"))) +
  geom_bar(stat = "identity") +
  scale_fill_manual(name = 'Car model', values = c(my_pal_l)) +
  
  geom_text(position = position_stack(vjust = 0.8), color = my_pal_h[2], size=3.5) +
  geom_text(position = position_stack(vjust = 0.8), color = my_pal_h[2], size=3.51) +
  geom_text(position = position_stack(vjust = 0.8), color = my_pal_h[2], size=3.52) +
  geom_text(position = position_stack(vjust = 0.8), color = my_pal_h[2], size=3.53) +
  
  labs(x = '', y = 'Service costs (k PLN)') +
  theme(legend.position = "none")

ggplotly(g06, tooltip = c('text'))
    
```

#### Service costs per car

Mean service costs per car

*A: czy to są koszty per car_id czy per model?
Moze w tooltipie dodać informację, która nie wynika z wykresu? Np wiek samochodu i srednia liczba dzialan serwisowych w roku?*

```{r}
# Mean yearly service costs per car

df07 <- Service %>% group_by(calendar_year, car_id, producer, model) %>%
      summarise(service_cost_car = sum(service_cost)) %>%
      group_by(calendar_year, producer, model) %>%
      summarise(average_cost_per_car = mean(service_cost_car)) %>%
      group_by(producer, model) %>%
      summarise(average_cost_per_car_per_year = round(mean(average_cost_per_car),2))
    
     g07 <- ggplot(df07, aes(x = reorder(model, average_cost_per_car_per_year),
                             y = average_cost_per_car_per_year,
                             fill = reorder(producer, average_cost_per_car_per_year),
                             label = average_cost_per_car_per_year,
                             text = paste(
                               '<b>Producer:</b>', producer,
                               '\n', '<b>Model:</b>', model,
                               '\n', '<b>Mean yearly service cost:</b>', average_cost_per_car_per_year, ' PLN'))) +
        geom_bar(stat = "identity") +
        scale_fill_manual(name = 'Producer', values = my_pal_l,
                          limits = c(levels(Service$producer))) +
        labs(x = '', y = 'Mean yearly cost of service (PLN)') + 
       theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
    geom_text(position = position_stack(vjust = 0.95), color = my_pal_h[2], size=3.0) +
    geom_text(position = position_stack(vjust = 0.95), color = my_pal_h[2], size=3.01) +
    geom_text(position = position_stack(vjust = 0.95), color = my_pal_h[2], size=3.02) +
    geom_text(position = position_stack(vjust = 0.95), color = my_pal_h[2], size=3.03)
    

    ggplotly(g07, tooltip = c('text'))
```

*A: mysle, ze jak mamy ten wykres powyżej, to ten poniżej nie jest już potrzebny*


```{r}
    #Mean lifetime service costs per car

   
    
    df07 <- Service %>% group_by(car_id, producer, model) %>%
      summarise(service_cost_car = round(sum(service_cost),2)) %>%
      group_by(producer, model) %>%
      summarise(average_cost_per_car = round(mean(service_cost_car),2))

    g07 <- ggplot(df07, aes(x = reorder(model, average_cost_per_car),
                             y = average_cost_per_car,
                             fill = reorder(producer, average_cost_per_car),
                             text = paste(
                               '<b>Producer:</b>', producer, '\n', '<b>Model:</b>', model, '\n',
                               '<b>Mean service cost:</b>', average_cost_per_car, ' PLN'))) +
        geom_bar(stat = "identity") +
        scale_fill_manual(name = 'Producer', values = my_pal_l,
                          limits = c(levels(Service$producer))) +
        labs(x = '', y = 'Mean lifetime cost of service (PLN)') + 
       theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

    ggplotly(g07, tooltip = c('text'))
```
